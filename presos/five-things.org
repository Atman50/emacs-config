#+STARTUP: overview
#+TITLE: Five-things I love about Emacs

* Presenter Background
  [[mailto:mr.adtaylor@gmail.com][Adam Taylor]] (mr.adtaylor@gmail.com)
** 35 years of industry experience
   - Mostly as a developer or architect
   - Up and down stack
   - Various environments and languages
   - Currently at Carbonite
     - C#, Python, C++
     - Windows, Linux
     - Azure, AWS, Terraform
     - Jira, Jenkins, Confluence
   - Using emacs for more than 35 years
     - First learned in school
     - Most useful tool ever

* Five-things I love about Emacs
  - Emacs helps those who help themselves
  - Dynamic Abbreviations
  - Yasnippets
  - "Easy" customization
  - Extensible
** Much more:
   - Ivy/Helm/Ido (completion modes)
   - Org-mode
   - Magit
   - eshell, ansi-term
   - counsel-git-grep
   - projectile
   - which-key
   - Tramp
   - IDE (C#, Python)
   - ispell

* Emacs helps those who help themselves
** *Don't Panic*
**  Help starts with ~C-h~
   |-------+-----------------------------------------------------------------|
   | ~C-h~ | Description                                                     |
   |-------+-----------------------------------------------------------------|
   | ~?~   | List of the help you can get after C-h                          |
   | ~m~   | Mode. Very helpful for all those special mode-based key strokes |
   | ~i~   | *Info*. Just amazing                                            |
   | ~a~   | Apropos - shows a list of functions matching expression         |
   | ~f~   | Describe function                                               |
   | ~v~   | Describe variable                                               |
   | ~k~   | Describe key                                                    |
   | ~b~   | Show bindings                                                   |
   |-------+-----------------------------------------------------------------|
** *Info* is for real
   Everything you need to know about emacs can be found here (cannot be
   stressed enough). Google is a good source too, but always start with info.
** Use the *menu*
   Many times I've been amazed at what's up on the menu area. For example,
   under the ~Tools~ menu there is a ~Version Control~ menu. Emacs, out of the
   box, understands git, svn, cvs, ....

* Dynamic Abbreviations
  - ~M-/~ - PFM
  - Single biggest productivity boost

* Yasnippets
  - Simple, easy to customize
  - Mode-based
  - Makes life very simple
  - Not built-in (we'll cover extensible)

* "Easy" customization
  - ~M-x customize-group~
  - ~M-x customize-face~
  - It is handy to bind ~C-hc~ to customize-gruop
  - It is useful to put customizations in separate file (see Extensible)

* Extensible
** Packages
   - Use ~use-package~ - but needs to be installed (see below)
   - Tons of extensions

** init.el
   The ~$(HOME)/.emacs.d/init.el~ file is where the extensions get loaded
   from. Many people break up the init.el file, but I think that makes it more
   unwieldy. 

   Let's build up a simple ~init.el~

*** Package initialization
    #+BEGIN_SRC emacs-lisp
    ;; Initialize the package system
    (package-initialize)
    #+END_SRC

*** Split customizations out
    Having customizations in the ~init.el~ file makes it more difficult to put
    your initialization under source control. Keep your customizations
    separate.
    #+BEGIN_SRC emacs-lisp
    ;; Your customizations are stored in the custom.el file
    ;;    *DO THIS FIRST SO YOU CAN CUSTOMIZE PACKAGES BEFORE LOADING THEM*
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (load custom-file)
    ;; Initialize the package system
    #+END_SRC

*** Setup the ~package-archives~
    The packages reside in different locations. Add them here and make sure to
    get org from the org-specific repository.
    #+BEGIN_SRC emacs-lisp
    (unless (assoc-default "melpa" package-archives)
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
    (unless (assoc-default "org" package-archives)
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))
    (unless (assoc-default "gnu" package-archives)
      (add-to-list 'package-ar1chives '("gnu" . "http://elpa.gnu.org/packages/") t))
    ;; Setup pinned stuff for org
    (setq package-pinned-packages '((org . "org")
                                    (org-plus-contrib . "org")))

    ;; Re-read the packages
    (package-refresh-contents)
    #+END_SRC

*** Auto-load magic
    #+BEGIN_SRC emacs-lisp
    ;; Make sure the packages install if not there
    (defun init/auto-install (pkg &rest args)
      "Advisor for use-package. Pass the same PKG and ARGS."
      (unless (package-installed-p pkg)
        (package-install pkg)))

    (init/auto-install 'use-package)

    (advice-add 'use-package :before #'init/auto-install)
    #+END_SRC

*** Finally
    #+BEGIN_SRC emacs-lisp
    ;; load-up use-package
    (require 'use-package)
    #+END_SRC

*** Now add your customizations
    A very handy tool for beginners is ~which-key~. This creates a nice popup
    in the mini-buffer that allows you to see all the bindings available.
    #+BEGIN_SRC emacs-lisp
    (use-package which-key :ensure t :defer t)
    ;; Turn it on
    (which-key-mode 1)
    #+END_SRC

* More stuff
  - Try things, especially magit for git users
  - Completion modes!!!
  - Open different types of files (surprises abound)

* That's all folks
  Questions? Comments?
