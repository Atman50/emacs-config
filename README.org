#+STARTUP: showeverything
#+OPTIONS: toc:4 h:4
#+HTML_HEAD: <style>
#+HTML_HEAD:     table { border: 1px solid black; border-collapse:collapse; margin-left: 2%; }
#+HTML_HEAD:     th.org-left   { border: 1px solid black; text-align: left; background-color: lightgray  }
#+HTML_HEAD:     td.org-left   { border: 1px solid black; text-align: left; font-family: monospace; }
#+HTML_HEAD: </style>
#+AUTHOR: Adam Taylor
#+EMAIL: mr.adtaylor@gmail.com
#+TITLE: Adam's Portable and Literate Emacs Initialization

   #+NAME: custom-vars-table
   #+BEGIN_SRC emacs-lisp :results silent :exports results :var custom-vars=() :tangle no
     ;; This "function" creates a list that is converted to a table by the exporter
     `((Symbol\ Name Value)
       hline
       ,@(cl-loop for cv in custom-vars
                  collect `(,cv
                            ,(replace-regexp-in-string "\n" "<br>" (string-trim-right (pp-to-string (default-value cv)))))))
   #+END_SRC


* Overview
  This is my literate and @@html:<font color=red size=+3><b><u>@@portable@@html:</u></b></font>@@ Emacs initialization.
** Quick start
   Simply

   1. git clone this repository into =~/.emacs.d=: =git clone https://github.com/Atman50/emacs-config.git =/.emacs.d=

   2. start Emacs
   
   That's it.

   Starting Emacs for the first time on a new machine loads all the packages/configuration loads. It takes some time on this first
   load since all the packages referenced need to download and compile. On subsequent Emacs invocations startup time is much better.
   The ability to simply clone and start is what makes this configuration *highly portable*. Note that some of the Emacs
   customization (see =custom.el=) are system (file system) dependent. I handle this by using git to create a stash of the
   localized changes for =custom.el= and then apply it whenever I take updated configurations from the repository.

** Why a literate configuration
   Well mostly I wanted to learn how to do it, but also I was having issues with managing my initialization/configuration. FWIW
   this is the approach that I came up with. A simple 7 part =init.el= file with customization saved to its own file (that's read
   first).

   What I've gotten out of all this work is a truly portable, documented configuration that works well for me. Please feel free to
   take whatever portion(s) you wish from this and make it your very own.

   I have tried to make this configuration 100% portable meaning that on a new system (Linux or Windows at this point) with Emacs on
   it, I simple git clone this repository to =~/.emacs.d/~ and then fire up Emacs. Works every time for me.

** =init.el= in a few small sections
   To get started with a literate configuration, I use this simple =init.el= file. Here is the entire [[https://github.com/Atman50/emacs-config/blob/master/init.el][=init.el=]] file.

   Here are the pieces of the =init.el= file explained.

*** Load the custom file
    An Emacs user recently said "I don't use the Emacs customization" facility. I think that's just crazy. One of the nicest things
    about Emacs is the extensive and quite useful customization engine. You can customize variables and faces with ease and make the
    settings work for you.

    Loading this file first, even before package stuff, is important to get things working. In a subsequent section of this
    =init.el= the =package-refresh-contents= uses the variable =package-archives= for importing archive information (and eventually
    packages). 
    #+BEGIN_SRC emacs-lisp -r :tangle no
      (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
      (load custom-file t)
    #+END_SRC
    I've pointed the customization at my own file =custom.el= and loaded it here. Customization will now be written to this file
    from the Emacs customization system.

*** Initialize the package
    #+BEGIN_SRC emacs-lisp -r :tangle no
      (package-initialize)
    #+END_SRC
    Says it all; Initializes the package system.

*** Random setting
    #+BEGIN_SRC emacs-lisp -r :tangle no
      (prefer-coding-system 'utf-8)
    #+END_SRC
    This was necessary because some packages in ELPA had Unicode characters in them that my Windows system didn't like. Not a bad
    idea to set this somewhere and I needed it before the =package-refresh-contents= below.

*** Refresh the package archives
    But only if necessary. If we don't see the =use-package= package in the package manager, then we'll assume that this is probably
    a new load and we need to go fetch (for the first time) the archive content directories.
    #+BEGIN_SRC emacs-lisp -r :tangle no
      (unless (assoc 'use-package package-archive-contents)
        (package-refresh-contents))
    #+END_SRC
    If you wished to get fresh contents everytime Emacs starts, just get rid of the first line unless statement.

    The =package-refresh-contents= uses the following:

    #+NAME: init-file-custom-vars
    #+CALL: custom-vars-table(custom-vars='(package-archives))
    
*** Load up =use-package=
    This configuration relies heavily upon John Wiegley's most excellent =use-package= package. Although no longer used in the
    initialization file itself (because of issues loading =org-mode= - see below), this is here to power the rest of this literate
    configuration.
    #+BEGIN_SRC emacs-lisp -r :tangle no
      (unless (package-installed-p 'use-package)
        (package-install 'use-package))
      (require 'use-package)
    #+END_SRC

*** Make sure we have a recent =org= package
    I could not make =use-package= ignore the built-in =org= package in favor of the =org= package from the org repository. Many
    people suggested use the =:ensure=  and =:demand= keywords to control =use-package=, but to no avail. There's a nice discussion
    of [[https://github.com/jwiegley/use-package/issues/319]].

    Here's my code that guarantees that an =org= gets loaded from a repository ignoring the built in version. This first line checks
    to see if =org= is already loaded by interrogating the packages directory for an installed =org= package. Granted, this is a
    little "hacky" as it depends on the =org= package's version being numeric (at least the first two characters being numbers).
    The second line actually installs the package using the package definition in =package-archive-contents=. The contents are
    assured above by =package-refresh-contents=, which should only fire the first time this initialization is run on a new
    =~/.emacs.d= directory. The require at the end loads up =org= so the final piece of the configuration works.

    #+BEGIN_SRC emacs-lisp -r :tangle no
      (unless (file-expand-wildcards (concat package-user-dir "/org-[0-9][0-9]*"))
        (package-install (elt (cdr (assoc 'org package-archive-contents)) 0)))
      (require 'org)
    #+END_SRC

*** Finally, load up this file
    Simply use this file (I default it to =README=) and Babel tangle the configuration (=README.org=) into a file that gets loaded
    (=README.el=). The remainder of the initialization follows in this file.
    #+BEGIN_SRC emacs-lisp -r :tangle no
      (defvar my-cfg (concat user-emacs-directory "README"))
      (when (file-newer-than-file-p (concat my-cfg ".org") (concat my-cfg ".el"))
        (org-babel-tangle-file (concat my-cfg ".org")))
      (load my-cfg)
    #+END_SRC

* Configuration
  Here are my configuration bits. All of the following code snippets are tangled from this file into an =.el= file that gets loaded
  from the initialization file. Feel free to take as little or as much as you like from here.

** Just a little preamble
   This is a little piece of code that I picked up that might make things faster when downloading and installing all the packages.
   This turns down the garbage collector during the use-package loading when it has to do some compiling. Set it back when done with
   init.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq gc-cons-threshold 64000000)
     (add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold 800000)))
   #+END_SRC
  
   Also create a handy variable to know if we are Windows - used later on here.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defvar mswindows-p (string-match "windows" (symbol-name system-type)))
   #+END_SRC

** General packages
   Here are some general packages
*** [[https://github.com/myrjola/diminish.el][diminish]]
    Handy mode to make the modeline nicer. I also use to set mode to special characters (for example, see =flycheck-mode=)
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package diminish)
    #+END_SRC
*** [[https://github.com/priyadarshan/bind-key][bind-key]]
    Much better binding capabilities
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package bind-key)
    #+END_SRC
*** savehist
    A great built-in that allows us to have a history file. This means certain elements are saved between sessions of Emacs. Set the
    following variables to control =savehist= (use customize).

    #+NAME: savehist-custom-vars
    #+CALL: custom-vars-table(custom-vars='(savehist-file savehist-additional-variables savehist-mode))

    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package savehist :demand t)                ;; Nice history in ~/.emacs.d/savehist
    #+END_SRC
*** [[https://github.com/Wilfred/ag.el][ag]]
    AKA =silversearcher=. Simple interface to excellent tool. I have it installed in my =cygwin64= area and it seems to play well in my
    Windows environment.

    NB: doesn't seem to work so well under Windows.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package ag)
    #+END_SRC
*** [[http://github.com/jschaf/powershell.el][powershell]]
    Excellent too to run powershell in Emacs
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package powershell
        :if mswindows-p)
    #+END_SRC
*** themes and modeline
    #+BEGIN_SRC emacs-lisp :tangle yes
      (load-theme 'leuven t)                          ;; Theme: works better before powerline
      (use-package powerline
        :demand t
        :config (powerline-default-theme))
    #+END_SRC
*** aspx editing
    Make aspx editing more palatable using =html-mode=.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-to-list 'auto-mode-alist
                   '("\\.aspx\\'" . html-mode)
                   '("\\.aspcx\\'" . html-mode))
    #+END_SRC
*** Other useful packages
    OK, a little tired of documenting each package on it's own. These packages are just generally useful.

    =which-key= very helpful for finding way around.

    #+BEGIN_SRC emacs-lisp -r :tangle yes
      (use-package realgud :demand t)
      (use-package projectile :demand t :config (projectile-mode t))
      (use-package ibuffer-projectile)
      (use-package xterm-color)
      (use-package which-key :demand t :diminish "")
      (use-package sh-script)
      (use-package desktop
        :config
        ;; put desktop in Emacs start directory
        (set-variable 'desktop-path (cons default-directory desktop-path))) (ref:desktop-path)
      (use-package paredit
        :demand t
        :config
        (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode))
    #+END_SRC

    Note that the setting of [[(desktop-path)][=desktop-path=]] allows the multiple =.emacs.desktop= files, each in the directory where =emacs= was
    started. Although =desktop-path= is changed outside =custom.el=, I've included it here in the table below so you can see that
    the default is augmented with the start-up directory which in this case is =~/.emacs.d=.

    Customized variables of interest here:

    #+NAME: other-pkgs-custom-vars
    #+CALL: custom-vars-table(custom-vars='(desktop-path desktop-save-mode))

* Working with C#
  I'm a C# developer and pretty much dislike big edits using Visual Studio. I've spent some amount of time coming
  up with a good C# configuration. This works spectacularly well and takes only minutes to setup.

  To use Omnisharp follow these directions:
  1. Load up local Omnisharp (Roslyn flavor) from [[https://github.com/OmniSharp/omnisharp-roslyn/releases][Omnisharp-Roslyn releases]]
  2. Customize the variable =omnisharp-server-executable-path= to point to your Omnisharp Roslyn. For example
     "c:/omnisharp-roslyn-v1.27.2/OmniSharp.exe".
  There are comprehensive directions at [[https://github.com/OmniSharp/omnisharp-emacs.git][omnisharp-emacs]].

  #+BEGIN_SRC emacs-lisp :tangle yes
    (defvar config/use-omnisharp nil)
    (let ((omnisharp (car (get 'omnisharp-server-executable-path 'saved-value))))
      (unless (null omnisharp)
        (setq config/use-omnisharp (file-exists-p omnisharp))))

    (use-package omnisharp
      :diminish "\u221e"                            ;; infinity symbol
      :if config/use-omnisharp
      :bind (:map omnisharp-mode-map
                  ("C-c o" . omnisharp-start-omnisharp-server)
                  ("C-c d" . omnisharp-go-to-definition-other-window)
                  ("C-x C-j" . counsel-imenu)))
    (use-package csharp-mode
      :config
      (when config/use-omnisharp
        (add-hook 'csharp-mode-hook 'company-mode)
        (add-hook 'csharp-mode-hook 'omnisharp-mode)))
  #+END_SRC

* [[https://github.com/magit/magit][=magit=]]/git configuration
  The *most awesome* git porcelain. Most here are part of magit, =[[https://github.com/pidu/git-timemachine][git-time-machine]]= is not, but well worth using.
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package git-commit)
    (use-package magit
      :demand t
      :bind (("C-c f" . magit-find-file-other-window)
             ("C-c g" . magit-status)
             ("C-c l" . magit-log-buffer-file))
      ;; Make the default action a branch checkout, not a branch visit when in branch mode
      :bind (:map magit-branch-section-map
                  ([remap magit-visit-thing] . magit-branch-checkout)))
    (use-package magit-filenotify)
    (use-package magit-find-file)
    (use-package git-timemachine)
  #+END_SRC

    Customized variables:
    #+NAME: magit-custom-vars
    #+CALL: custom-vars-table(custom-vars='(git-commit-fill-column magit-completing-read-function magit-pull-arguments nil magit-repository-directories))
  
* =org-mode= Configuration
  Org-mode configurations. =org-bullets= used to be part of org but is now outside.

  The =htmlize= package allows the HTML and Markdown exporters to work (underlying code).

  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package org-bullets
       :demand t
       :config (add-hook 'org-mode-hook (lambda () 
                                          (toggle-truncate-lines -1)
                                          (auto-fill-mode 1)
                                          (org-bullets-mode))))
    (use-package org-autolist :demand t)
    (use-package htmlize :demand t)
  #+END_SRC

  Customized variables for org-mode:
  #+NAME: org-mode-custom-vars
  #+CALL: custom-vars-table(custom-vars='(org-catch-invisible-edits org-html-postamble org-html-postamble-format org-log-done org-log-into-drawer))

** =org-mode= export hacks for HTML and Markdown
   I export into markdown for github. I do not use the =ox-gfm= package because when I tried it, it modified the source file because
   of this file's use of the =#+CALL= construct (each call adds the table to the source file). So I use the built in =ox-md=
   exporter. However, it just indents the code blocks rather put the =```emacs-lisp= code snippet prefix and =```= postfix but
   rather just indents. First we load the library so it turns up in the export menu (=C-x C-e=). Then we override the output method
   for the code.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (load-library "ox-md")

     (defun org-md-example-block (example-block _contents info)
       "My modified: Transcode EXAMPLE-BLOCK element into Markdown format.
     CONTENTS is nil.  INFO is a plist used as a communication
     channel."
       (concat "```emacs-lisp\n"
               (org-remove-indentation
                (org-export-format-code-default example-block info))
               "```\n"))
   #+END_SRC
  
   To support the using of dynamic custom vars table using the library of Babel, the export text for Markdown and HTML goes through
   =orgtbl-to-orgtbl= which turns the list returned in the an org-mode table. After =orgtbl-to-orgtbl=, the =htmlize= package turns
   it into a HTML table. The adviser changes all the spaces after a =<br>= into =&nbsp;= entities and surrounds them with inline
   HTML. This is necessary because =orgtbl-to-orgtbl= strips text between the =@@= used to inline HTML. The adviser also protects
   any underscores in the table with inline HTML.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun my-md-export-hack(text)
       "Fix up md export on writing my README.org file.
             Converts a <br> followed by zero or more spaces into inline html format.
             For example: an in put of \"hello<br>there<br> my<br>  friend<br>\" becomes
             \"hello@@html:<br>@@there@@html:<br>&nbsp;@@my@@html:<br>&nbsp;&nbsp;@@friend@@html:<br>@@\"
             This function also adds inline HTML around '_' in the text."
       (when (stringp text)
         (let ((result text)
               (replacements '(("<br>\[[:space:]\]*" (lambda (match)
                                                       (concat "@@html:<br>"
                                                               (apply 'concat (make-list (- (length match) 4) "&nbsp;"))
                                                               "@@")))
                               ("\"\\(https?:\[^\"\]*\\)" "\"@@html:<a href=\"\\1\">\\1</a>@@")
                               ("_" "@@html:_@@")
                               ("<\\(p.*?\\)>" "@@html:&lt;\\1&gt;@@")
                               ("</p>" "@@html:&lt;/p&gt;@@"))))
           (cl-loop for rep in replacements do
                    (setq result (replace-regexp-in-string (nth 0 rep) (nth 1 rep) result)))
           result)))

     (advice-add 'orgtbl-to-orgtbl :filter-return 'my-md-export-hack)
   #+END_SRC


* python configuration
  At one point I was using anaconda but have switched back to elpy. I really like =eply-config= that tells you if everything is
  working properly. I've been using a =virtualenv= for my python development and couldn't be happier. Perhaps the only thing that
  bothers me is that when an object is returned, PyCharm will give you list and dictionary methods while =eply=/=company= does not.
  Seems to be the only real issue at this point.

  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package company
      :diminish "Co"
      :config
      (when config/use-omnisharp
        (add-to-list 'company-backends 'company-omnisharp)))
    (use-package company-jedi
      :demand t)
    (use-package elpy
      :demand t
      :config
      (elpy-enable))
    (use-package flycheck
      :diminish  "\u2714"           ;; heavy checkmark
      :config
      (global-flycheck-mode))
    (use-package pylint)
    (use-package python-docstring
      :config
      (python-docstring-install))
    (use-package python
      :config
      (progn
        (add-hook 'python-mode-hook '(lambda () (add-to-list 'company-backends 'company-jedi)))
        (add-hook 'python-mode-hook 'flycheck-mode)
        (add-hook 'python-mode-hook 'company-mode)))
  #+END_SRC

    Customized variables used in this python configuration:
    #+NAME: python-custom-vars
    #+CALL: custom-vars-table(custom-vars='(elpy-modules python-indent-trigger-commands python-shell-completion-setup-code python-shell-completion-string-code python-shell-interpreter python-shell-interpreter-args python-shell-prompt-output-regexp python-shell-prompt-regexp))

* =ivy= Configuration
  Was a =helm= user, but switched to =ivy=. Lots of nice features in =ivy=
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package ivy
      :demand t
      :diminish ""
      :bind (:map ivy-minibuffer-map
                  ("C-w" . ivy-yank-word)           ;; make work like isearch
                  ("C-r" . ivy-previous-line))
      :config
      (progn
        (setq ivy-initial-inputs-alist nil)         ;; no regexp by default
        ;;(setq ivy-re-builders-alist                 ;; allow input not in order
        ;;      '((t . ivy--regex-ignore-order)))))
        ))

    (use-package counsel
      :bind (("M-x" . counsel-M-x)
             ("C-x g" . counsel-git)
             ("C-x C-f" . counsel-find-file)
             ("C-x C-j" . counsel-imenu))
      :bind (:map help-map
                  ("f" . counsel-describe-function)
                  ("v" . counsel-describe-variable)
                  ("b" . counsel-descbinds)))
    (use-package counsel-projectile
      :demand t
      :config
      (counsel-projectile-mode t))
    (use-package counsel-etags)
    (use-package ivy-hydra)
    (use-package swiper
      :bind (("C-S-s" . isearch-forward)
             ("C-s" . swiper)
             ("C-S-r" . isearch-backward)
             ("C-r" . swiper)))
    (use-package avy)
  #+END_SRC

    Customized variables:
    #+NAME: ivy-custom-vars
    #+CALL: custom-vars-table(custom-vars='(ivy-count-format ivy-height ivy-mode ivy-use-virtual-buffers))

* =yasnippet= Configuration
  =yasnippet= is a truly awesome package. Local modifications should go in =~/.emacs.d/snippets/=.

  This also takes care of hooking up =company= completion with =yasnippet= expansion.
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package warnings :demand t)
    (use-package yasnippet
      :diminish (yas-minor-mode . "")
      :config
      (progn
        (yas-reload-all)
        ;; fix tab in term-mode
        (add-hook 'term-mode-hook (lambda() (yas-minor-mode -1)))
        ;; Fix yas indent issues
        (add-hook 'python-mode-hook '(lambda () (set (make-local-variable 'yas-indent-line) 'fixed)))
        ;; Setup to allow for yasnippets to use code to expand
        (add-to-list 'warning-suppress-types '(yasnippet backquote-change))))
    (use-package yasnippet-snippets :demand t)

    (defvar company-mode/enable-yas t "Enable yasnippet for all backends.")
    (defun company-mode/backend-with-yas (backend)
      "Add in the company-yasnippet BACKEND."
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))
    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
  #+END_SRC

  Configured variables of interest:
  #+NAME: yas-custom-vars
  #+CALL: custom-vars-table(custom-vars='(yas-global-mode))


* Additional bits-o-configuration
** Limit the length of =which-function=
   =which-function= which is used by =powerline= has no maximum method/function signature. This handy adviser limits the name to 64
   characters.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defvar  which-function-max-width 64 "The maximum width of the which-function string.")
     (advice-add 'which-function :filter-return
                 (lambda (s) (when (stringp s)
                               (if (< (string-width s) which-function-max-width) s
                                 (concat (truncate-string-to-width s (- which-function-max-width 3)) "...")))))
   #+END_SRC
** =my-ansi-term=                               
   Allows me to name my ANSI terms. Was very useful when I used more ANSI shells (so that tabs were interpreted by the shell). Some
   other modes and shells make this less useful these days.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun my-ansi-term (term-name cmd)
       "Create an ansi term with a name - other than *ansi-term* given TERM-NAME and CMD."
       (interactive "sName for terminal: \nsCommand to run [/bin/bash]: ")
       (ansi-term (if (= 0 (length cmd)) "/bin/bash" cmd))
       (rename-buffer term-name))
   #+END_SRC
** Understand file type by shebang
   When a file is opened and it is determined there is no mode (fundamental-mode) this code reads the first line of the file looking
   for an appropriate shebang for either python or bash and sets the mode for the file.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun my-find-file-hook ()
       "If `fundamental-mode', look for script type so the mode gets properly set.
     Script-type is read from #!/... at top of file."
       (if (eq major-mode 'fundamental-mode)
           (ignore-errors
               (save-excursion
                 (goto-char (point-min))
                 (re-search-forward "^#!\s*/.*/\\(python\\|bash\\).*$")
                 (if (string= (match-string 1) "python")
                     (python-mode)
                   (sh-mode))))))

     (add-hook 'find-file-hook 'my-find-file-hook)
   #+END_SRC

** Additional Configuration
   Setup =eldoc= mode, use =y-or-n-p= instead of =yes-or-no-p=. Key bindings...
   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)    ;; Run elisp with eldoc-mode
     (fset 'list-buffers 'ibuffer)                   ;; prefer ibuffer over list-buffers
     (fset 'yes-or-no-p 'y-or-n-p)                   ;; for lazy people use y/n instead of yes/no
     (diminish 'eldoc-mode "Doc")                    ;; Diminish eldoc-mode

     ;; Some key bindings
     (bind-key "C-x p" 'pop-to-mark-command)
     (bind-key "C-h c" 'customize-group)
     (bind-key "C-+" 'text-scale-increase)
     (bind-key "C--" 'text-scale-decrease)
     (bind-key "C-z" 'nil)                           ;; get rid of pesky "\C-z"
     (bind-key "C-z" 'nil ctl-x-map)                 ;;    and "\C-x\C-z" annoying minimize
     (bind-key "C-c C-d" 'dired-jump)
     (bind-key "C-c r" 'revert-buffer)
     (bind-key "C-c t" 'toggle-truncate-lines)
     (bind-key "C-c c" 'comment-region)
     (bind-key "C-c u" 'uncomment-region)
     (bind-key "<up>" 'enlarge-window ctl-x-map)     ;; note: C-x
     (bind-key "<down>" 'shrink-window ctl-x-map)    ;; note: C-x

     (setq-default ediff-ignore-similar-regions t)   ;; Not a variable but controls ediff

     ;; Enable some stuff that's normally disabled
     (put 'narrow-to-region 'disabled nil)
     (put 'downcase-region 'disabled nil)
     (put 'upcase-region 'disabled nil)
     (put 'scroll-left 'disabled nil)
  #+END_SRC

